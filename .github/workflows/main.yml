name: Release
on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      publishMS:
        description: "Publish to the Microsoft Marketplace"
        type: boolean
        required: true
        default: "true"
      publishOVSX:
        description: "Publish to Open VSX"
        type: boolean
        required: true
        default: "true"
      publishGH:
        description: "Publish to GitHub Releases"
        type: boolean
        required: true
        default: "true"

jobs:
  package:
    name: Package
    runs-on: ubuntu-latest
    outputs:
      packageName: ${{ env.PACKAGE_NAME }}
      tag: ${{ env.TAG }}
      version: ${{ env.VERSION }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm i

      - name: Setup package path
        run: echo "PACKAGE_NAME=$(node -e \"console.log(require('./package.json').name + '-' + require('./package.json').version + '.vsix')\")" >> $GITHUB_ENV

      - name: Package
        run: npx vsce package --out $PACKAGE_NAME

      - uses: actions/upload-artifact@v2
        with:
          name: $PACKAGE_NAME
          path: ./$PACKAGE_NAME
          if-no-files-found: error

      - name: Setup tag
        run: |
          version=$(node -p -e "require('./package.json').version")
          echo "TAG=release/$version" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_ENV
        shell: bash

  publishMS:
    name: Publish to VS marketplace
    runs-on: ubuntu-latest
    needs: package
    if: github.event.inputs.publishMS == 'true'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.package.outputs.packageName }}
      - name: Publish to VS marketplace
        run: npx vsce publish --packagePath ./$PACKAGE_NAME -p ${{ secrets.VSCE_PAT }}

  publishOVSX:
    name: Publish to Open VSX
    runs-on: ubuntu-latest
    needs: package
    if: github.event.inputs.publishOVSX == 'true'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.package.outputs.packageName }}
      - name: Publish to Open VSX
        run: npx ovsx publish ./$PACKAGE_NAME -p ${{ secrets.OVSX_PAT }}

  publishGH:
    name: Publish to GitHub releases
    runs-on: ubuntu-latest
    needs: package
    if: github.event.inputs.publishGH == 'true'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.package.outputs.packageName }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: $TAG
          release_name: Release $VERSION
          draft: false
          prerelease: false

      - name: Upload assets to a Release
        uses: AButler/upload-release-assets@v2.0
        with:
          files: $PACKAGE_NAME
          release-tag: $TAG
          repo-token: ${{ secrets.GITHUB_TOKEN }}
